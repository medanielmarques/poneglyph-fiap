generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int? // GitHub specific
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token              String? // Twitter specific
  oauth_token_secret       String? // Twitter specific
  user                     User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  subscriber    Boolean   @default(false)

  userStats UserStats?
  Account   Account[]
  Session   Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model UserStats {
  id               String @id @default(cuid())
  totalXp          Int    @default(0)
  currentOffensive Int    @default(0)
  highestOffensive Int    @default(0)
  heartsCount      Int    @default(5)
  coins            Int    @default(10)
  user             User   @relation(fields: [userId], references: [id])
  userId           String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}
